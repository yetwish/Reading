package com.xidian.yetwish.reading.framework.database.generator;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER.
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, Long.class, "uid", false, "UID");
        public final static Property OrgId = new Property(2, Long.class, "orgId", false, "ORG_ID");
        public final static Property DepartmentId = new Property(3, Long.class, "departmentId", false, "DEPARTMENT_ID");
        public final static Property Sequence = new Property(4, Integer.class, "sequence", false, "SEQUENCE");
        public final static Property Mobile = new Property(5, String.class, "mobile", false, "MOBILE");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
        public final static Property Name = new Property(7, String.class, "name", false, "NAME");
        public final static Property Pinyin = new Property(8, String.class, "pinyin", false, "PINYIN");
        public final static Property Sex = new Property(9, Integer.class, "sex", false, "SEX");
        public final static Property Email = new Property(10, String.class, "email", false, "EMAIL");
        public final static Property HomePhone = new Property(11, String.class, "homePhone", false, "HOME_PHONE");
        public final static Property PersonalCellPhone = new Property(12, String.class, "personalCellPhone", false, "PERSONAL_CELL_PHONE");
        public final static Property ShortNum = new Property(13, String.class, "shortNum", false, "SHORT_NUM");
        public final static Property ShortNum2 = new Property(14, String.class, "shortNum2", false, "SHORT_NUM2");
        public final static Property WorkPhone = new Property(15, String.class, "workPhone", false, "WORK_PHONE");
        public final static Property WorkPhone2 = new Property(16, String.class, "workPhone2", false, "WORK_PHONE2");
        public final static Property VirtualCellPhone = new Property(17, String.class, "virtualCellPhone", false, "VIRTUAL_CELL_PHONE");
        public final static Property Remark = new Property(18, String.class, "remark", false, "REMARK");
        public final static Property IsAllowLogin = new Property(19, Boolean.class, "isAllowLogin", false, "IS_ALLOW_LOGIN");
        public final static Property VirtualCode = new Property(20, String.class, "virtualCode", false, "VIRTUAL_CODE");
        public final static Property Fax = new Property(21, String.class, "fax", false, "FAX");
        public final static Property ShortPinyin = new Property(22, String.class, "shortPinyin", false, "SHORT_PINYIN");
        public final static Property CustomField = new Property(23, String.class, "customField", false, "CUSTOM_FIELD");
        public final static Property Privilege = new Property(24, String.class, "privilege", false, "PRIVILEGE");
        public final static Property OrgName = new Property(25, String.class, "orgName", false, "ORG_NAME");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'UID' INTEGER," + // 1: uid
                "'ORG_ID' INTEGER," + // 2: orgId
                "'DEPARTMENT_ID' INTEGER," + // 3: departmentId
                "'SEQUENCE' INTEGER," + // 4: sequence
                "'MOBILE' TEXT," + // 5: mobile
                "'TITLE' TEXT," + // 6: title
                "'NAME' TEXT," + // 7: name
                "'PINYIN' TEXT," + // 8: pinyin
                "'SEX' INTEGER," + // 9: sex
                "'EMAIL' TEXT," + // 10: email
                "'HOME_PHONE' TEXT," + // 11: homePhone
                "'PERSONAL_CELL_PHONE' TEXT," + // 12: personalCellPhone
                "'SHORT_NUM' TEXT," + // 13: shortNum
                "'SHORT_NUM2' TEXT," + // 14: shortNum2
                "'WORK_PHONE' TEXT," + // 15: workPhone
                "'WORK_PHONE2' TEXT," + // 16: workPhone2
                "'VIRTUAL_CELL_PHONE' TEXT," + // 17: virtualCellPhone
                "'REMARK' TEXT," + // 18: remark
                "'IS_ALLOW_LOGIN' INTEGER," + // 19: isAllowLogin
                "'VIRTUAL_CODE' TEXT," + // 20: virtualCode
                "'FAX' TEXT," + // 21: fax
                "'SHORT_PINYIN' TEXT," + // 22: shortPinyin
                "'CUSTOM_FIELD' TEXT," + // 23: customField
                "'PRIVILEGE' TEXT," + // 24: privilege
                "'ORG_NAME' TEXT);"); // 25: orgName
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_USER_UID_DEPARTMENT_ID_ORG_ID ON USER" +
                " (UID,DEPARTMENT_ID,ORG_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_USER_ORG_ID ON USER" +
                " (ORG_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_USER_NAME ON USER" +
                " (NAME);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_USER_MOBILE ON USER" +
                " (MOBILE);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_USER_UID ON USER" +
                " (UID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_USER_DEPARTMENT_ID_ORG_ID ON USER" +
                " (DEPARTMENT_ID,ORG_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_USER_UID_ORG_ID ON USER" +
                " (UID,ORG_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(2, uid);
        }
 
        Long orgId = entity.getOrgId();
        if (orgId != null) {
            stmt.bindLong(3, orgId);
        }
 
        Long departmentId = entity.getDepartmentId();
        if (departmentId != null) {
            stmt.bindLong(4, departmentId);
        }
 
        Integer sequence = entity.getSequence();
        if (sequence != null) {
            stmt.bindLong(5, sequence);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(6, mobile);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(9, pinyin);
        }
 
        Integer sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(10, sex);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(11, email);
        }
 
        String homePhone = entity.getHomePhone();
        if (homePhone != null) {
            stmt.bindString(12, homePhone);
        }
 
        String personalCellPhone = entity.getPersonalCellPhone();
        if (personalCellPhone != null) {
            stmt.bindString(13, personalCellPhone);
        }
 
        String shortNum = entity.getShortNum();
        if (shortNum != null) {
            stmt.bindString(14, shortNum);
        }
 
        String shortNum2 = entity.getShortNum2();
        if (shortNum2 != null) {
            stmt.bindString(15, shortNum2);
        }
 
        String workPhone = entity.getWorkPhone();
        if (workPhone != null) {
            stmt.bindString(16, workPhone);
        }
 
        String workPhone2 = entity.getWorkPhone2();
        if (workPhone2 != null) {
            stmt.bindString(17, workPhone2);
        }
 
        String virtualCellPhone = entity.getVirtualCellPhone();
        if (virtualCellPhone != null) {
            stmt.bindString(18, virtualCellPhone);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(19, remark);
        }
 
        Boolean isAllowLogin = entity.getIsAllowLogin();
        if (isAllowLogin != null) {
            stmt.bindLong(20, isAllowLogin ? 1l: 0l);
        }
 
        String virtualCode = entity.getVirtualCode();
        if (virtualCode != null) {
            stmt.bindString(21, virtualCode);
        }
 
        String fax = entity.getFax();
        if (fax != null) {
            stmt.bindString(22, fax);
        }
 
        String shortPinyin = entity.getShortPinyin();
        if (shortPinyin != null) {
            stmt.bindString(23, shortPinyin);
        }
 
        String customField = entity.getCustomField();
        if (customField != null) {
            stmt.bindString(24, customField);
        }
 
        String privilege = entity.getPrivilege();
        if (privilege != null) {
            stmt.bindString(25, privilege);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(26, orgName);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // uid
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // orgId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // departmentId
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // sequence
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mobile
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // title
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // pinyin
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // sex
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // email
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // homePhone
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // personalCellPhone
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // shortNum
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // shortNum2
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // workPhone
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // workPhone2
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // virtualCellPhone
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // remark
            cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0, // isAllowLogin
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // virtualCode
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // fax
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // shortPinyin
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // customField
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // privilege
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25) // orgName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setOrgId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setDepartmentId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setSequence(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setMobile(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPinyin(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSex(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setEmail(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setHomePhone(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPersonalCellPhone(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setShortNum(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setShortNum2(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setWorkPhone(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setWorkPhone2(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setVirtualCellPhone(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setRemark(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setIsAllowLogin(cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0);
        entity.setVirtualCode(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setFax(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setShortPinyin(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setCustomField(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setPrivilege(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setOrgName(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
