package com.xidian.yetwish.reading.framework.database.generator;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DEPARTMENT.
*/
public class DepartmentDao extends AbstractDao<Department, Long> {

    public static final String TABLENAME = "DEPARTMENT";

    /**
     * Properties of entity Department.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrgId = new Property(1, Long.class, "orgId", false, "ORG_ID");
        public final static Property DepartmentId = new Property(2, Long.class, "departmentId", false, "DEPARTMENT_ID");
        public final static Property ParentId = new Property(3, Long.class, "parentId", false, "PARENT_ID");
        public final static Property UserCounts = new Property(4, Long.class, "userCounts", false, "USER_COUNTS");
        public final static Property Sequence = new Property(5, Integer.class, "sequence", false, "SEQUENCE");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property Description = new Property(7, String.class, "description", false, "DESCRIPTION");
        public final static Property ParentIds = new Property(8, String.class, "parentIds", false, "PARENT_IDS");
        public final static Property OrgName = new Property(9, String.class, "orgName", false, "ORG_NAME");
    };


    public DepartmentDao(DaoConfig config) {
        super(config);
    }
    
    public DepartmentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DEPARTMENT' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'ORG_ID' INTEGER," + // 1: orgId
                "'DEPARTMENT_ID' INTEGER," + // 2: departmentId
                "'PARENT_ID' INTEGER," + // 3: parentId
                "'USER_COUNTS' INTEGER," + // 4: userCounts
                "'SEQUENCE' INTEGER," + // 5: sequence
                "'NAME' TEXT," + // 6: name
                "'DESCRIPTION' TEXT," + // 7: description
                "'PARENT_IDS' TEXT," + // 8: parentIds
                "'ORG_NAME' TEXT);"); // 9: orgName
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_DEPARTMENT_DEPARTMENT_ID_ORG_ID ON DEPARTMENT" +
                " (DEPARTMENT_ID,ORG_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_DEPARTMENT_ORG_ID ON DEPARTMENT" +
                " (ORG_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_DEPARTMENT_PARENT_ID_ORG_ID ON DEPARTMENT" +
                " (PARENT_ID,ORG_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DEPARTMENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Department entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long orgId = entity.getOrgId();
        if (orgId != null) {
            stmt.bindLong(2, orgId);
        }
 
        Long departmentId = entity.getDepartmentId();
        if (departmentId != null) {
            stmt.bindLong(3, departmentId);
        }
 
        Long parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindLong(4, parentId);
        }
 
        Long userCounts = entity.getUserCounts();
        if (userCounts != null) {
            stmt.bindLong(5, userCounts);
        }
 
        Integer sequence = entity.getSequence();
        if (sequence != null) {
            stmt.bindLong(6, sequence);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
 
        String parentIds = entity.getParentIds();
        if (parentIds != null) {
            stmt.bindString(9, parentIds);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(10, orgName);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Department readEntity(Cursor cursor, int offset) {
        Department entity = new Department( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // orgId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // departmentId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // parentId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // userCounts
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // sequence
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // description
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // parentIds
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // orgName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Department entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrgId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setDepartmentId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setParentId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setUserCounts(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setSequence(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDescription(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setParentIds(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOrgName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Department entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Department entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
