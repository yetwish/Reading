package com.xidian.yetwish.reading.framework.database.generator;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xidian.yetwish.reading.framework.database.generator.Book;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BOOK.
*/
public class BookDao extends AbstractDao<Book, Long> {

    public static final String TABLENAME = "BOOK";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BookId = new Property(1, Long.class, "bookId", false, "BOOK_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Author = new Property(3, String.class, "author", false, "AUTHOR");
        public final static Property Language = new Property(4, String.class, "language", false, "LANGUAGE");
        public final static Property Progress = new Property(5, Float.class, "progress", false, "PROGRESS");
        public final static Property IconPath = new Property(6, String.class, "iconPath", false, "ICON_PATH");
        public final static Property Path = new Property(7, String.class, "path", false, "PATH");
    };


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BOOK' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'BOOK_ID' INTEGER," + // 1: bookId
                "'NAME' TEXT," + // 2: name
                "'AUTHOR' TEXT," + // 3: author
                "'LANGUAGE' TEXT," + // 4: language
                "'PROGRESS' REAL," + // 5: progress
                "'ICON_PATH' TEXT," + // 6: iconPath
                "'PATH' TEXT);"); // 7: path
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_BOOK_BOOK_ID ON BOOK" +
                " (BOOK_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BOOK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindLong(2, bookId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(4, author);
        }
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(5, language);
        }
 
        Float progress = entity.getProgress();
        if (progress != null) {
            stmt.bindDouble(6, progress);
        }
 
        String iconPath = entity.getIconPath();
        if (iconPath != null) {
            stmt.bindString(7, iconPath);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(8, path);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // bookId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // author
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // language
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // progress
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // iconPath
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // path
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBookId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAuthor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLanguage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProgress(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setIconPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Book entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Book entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
