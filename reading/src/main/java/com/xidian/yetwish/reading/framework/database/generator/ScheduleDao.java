package com.xidian.yetwish.reading.framework.database.generator;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SCHEDULE.
*/
public class ScheduleDao extends AbstractDao<Schedule, Long> {

    public static final String TABLENAME = "SCHEDULE";

    /**
     * Properties of entity Schedule.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Sid = new Property(0, Long.class, "sid", true, "SID");
        public final static Property Uid = new Property(1, Long.class, "uid", false, "UID");
        public final static Property Type = new Property(2, Integer.class, "type", false, "TYPE");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property ScheduleTime = new Property(4, Long.class, "scheduleTime", false, "SCHEDULE_TIME");
        public final static Property CreateTime = new Property(5, String.class, "createTime", false, "CREATE_TIME");
        public final static Property HostName = new Property(6, String.class, "hostName", false, "HOST_NAME");
        public final static Property AlertTime = new Property(7, Integer.class, "alertTime", false, "ALERT_TIME");
        public final static Property AlertType = new Property(8, Integer.class, "alertType", false, "ALERT_TYPE");
        public final static Property Priority = new Property(9, Integer.class, "priority", false, "PRIORITY");
        public final static Property MediaLocalPath = new Property(10, String.class, "mediaLocalPath", false, "MEDIA_LOCAL_PATH");
        public final static Property AttachmentDigest = new Property(11, String.class, "attachmentDigest", false, "ATTACHMENT_DIGEST");
    };


    public ScheduleDao(DaoConfig config) {
        super(config);
    }
    
    public ScheduleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SCHEDULE' (" + //
                "'SID' INTEGER PRIMARY KEY ," + // 0: sid
                "'UID' INTEGER," + // 1: uid
                "'TYPE' INTEGER," + // 2: type
                "'CONTENT' TEXT," + // 3: content
                "'SCHEDULE_TIME' INTEGER," + // 4: scheduleTime
                "'CREATE_TIME' TEXT," + // 5: createTime
                "'HOST_NAME' TEXT," + // 6: hostName
                "'ALERT_TIME' INTEGER," + // 7: alertTime
                "'ALERT_TYPE' INTEGER," + // 8: alertType
                "'PRIORITY' INTEGER," + // 9: priority
                "'MEDIA_LOCAL_PATH' TEXT," + // 10: mediaLocalPath
                "'ATTACHMENT_DIGEST' TEXT);"); // 11: attachmentDigest
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SCHEDULE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Schedule entity) {
        stmt.clearBindings();
 
        Long sid = entity.getSid();
        if (sid != null) {
            stmt.bindLong(1, sid);
        }
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(2, uid);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, type);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        Long scheduleTime = entity.getScheduleTime();
        if (scheduleTime != null) {
            stmt.bindLong(5, scheduleTime);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(6, createTime);
        }
 
        String hostName = entity.getHostName();
        if (hostName != null) {
            stmt.bindString(7, hostName);
        }
 
        Integer alertTime = entity.getAlertTime();
        if (alertTime != null) {
            stmt.bindLong(8, alertTime);
        }
 
        Integer alertType = entity.getAlertType();
        if (alertType != null) {
            stmt.bindLong(9, alertType);
        }
 
        Integer priority = entity.getPriority();
        if (priority != null) {
            stmt.bindLong(10, priority);
        }
 
        String mediaLocalPath = entity.getMediaLocalPath();
        if (mediaLocalPath != null) {
            stmt.bindString(11, mediaLocalPath);
        }
 
        String attachmentDigest = entity.getAttachmentDigest();
        if (attachmentDigest != null) {
            stmt.bindString(12, attachmentDigest);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Schedule readEntity(Cursor cursor, int offset) {
        Schedule entity = new Schedule( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // sid
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // uid
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // scheduleTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // createTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // hostName
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // alertTime
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // alertType
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // priority
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // mediaLocalPath
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // attachmentDigest
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Schedule entity, int offset) {
        entity.setSid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setScheduleTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setCreateTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHostName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAlertTime(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setAlertType(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setPriority(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setMediaLocalPath(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAttachmentDigest(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Schedule entity, long rowId) {
        entity.setSid(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Schedule entity) {
        if(entity != null) {
            return entity.getSid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
