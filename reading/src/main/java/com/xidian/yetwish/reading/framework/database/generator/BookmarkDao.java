package com.xidian.yetwish.reading.framework.database.generator;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xidian.yetwish.reading.framework.database.generator.Bookmark;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BOOKMARK.
*/
public class BookmarkDao extends AbstractDao<Bookmark, Long> {

    public static final String TABLENAME = "BOOKMARK";

    /**
     * Properties of entity Bookmark.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property BookmarkId = new Property(0, Long.class, "bookmarkId", true, "BOOKMARK_ID");
        public final static Property BookId = new Property(1, Long.class, "bookId", false, "BOOK_ID");
        public final static Property LastCharPosition = new Property(2, Long.class, "lastCharPosition", false, "LAST_CHAR_POSITION");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property ChapterIndex = new Property(4, Integer.class, "chapterIndex", false, "CHAPTER_INDEX");
    };


    public BookmarkDao(DaoConfig config) {
        super(config);
    }
    
    public BookmarkDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BOOKMARK' (" + //
                "'BOOKMARK_ID' INTEGER PRIMARY KEY ," + // 0: bookmarkId
                "'BOOK_ID' INTEGER," + // 1: bookId
                "'LAST_CHAR_POSITION' INTEGER," + // 2: lastCharPosition
                "'NAME' TEXT," + // 3: name
                "'CHAPTER_INDEX' INTEGER);"); // 4: chapterIndex
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BOOKMARK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Bookmark entity) {
        stmt.clearBindings();
 
        Long bookmarkId = entity.getBookmarkId();
        if (bookmarkId != null) {
            stmt.bindLong(1, bookmarkId);
        }
 
        Long bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindLong(2, bookId);
        }
 
        Long lastCharPosition = entity.getLastCharPosition();
        if (lastCharPosition != null) {
            stmt.bindLong(3, lastCharPosition);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        Integer chapterIndex = entity.getChapterIndex();
        if (chapterIndex != null) {
            stmt.bindLong(5, chapterIndex);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Bookmark readEntity(Cursor cursor, int offset) {
        Bookmark entity = new Bookmark( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // bookmarkId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // bookId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // lastCharPosition
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // chapterIndex
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Bookmark entity, int offset) {
        entity.setBookmarkId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBookId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setLastCharPosition(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setChapterIndex(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Bookmark entity, long rowId) {
        entity.setBookmarkId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Bookmark entity) {
        if(entity != null) {
            return entity.getBookmarkId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
